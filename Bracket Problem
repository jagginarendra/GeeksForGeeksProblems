package com;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.StringTokenizer;

class SegmentTreeNode {

	int unmatchedOpenParen, unmatchedClosedParen;

	void assignLeaf(char parenthesis) {

		if (parenthesis == '(') {
			// System.out.println("assigning (");
			this.unmatchedOpenParen = 1;
			this.unmatchedClosedParen = 0;
		} else {

			// System.out.println("assigning )");
			this.unmatchedOpenParen = 0;
			this.unmatchedClosedParen = 1;
		}

	}

	void merge(SegmentTreeNode left, SegmentTreeNode right) {

		// System.out.println("merging,left=" + left + ",right=" + right);

		int newMatches = left.unmatchedOpenParen >= right.unmatchedClosedParen ? right.unmatchedClosedParen
				: left.unmatchedOpenParen;

		this.unmatchedOpenParen = right.unmatchedOpenParen + left.unmatchedOpenParen - newMatches;

		this.unmatchedClosedParen = left.unmatchedClosedParen + right.unmatchedClosedParen - newMatches;

	}

	boolean getValue(SegmentTreeNode node) {

		return (node.unmatchedClosedParen == 0 && node.unmatchedOpenParen == 0);

	}

}

class SegmentTree {

	char word[];
	int N;

	SegmentTreeNode nodes[]; // array to store nodes

	public SegmentTree(char word[], int N) {

		this.word = word;
		this.N = N;

		nodes = new SegmentTreeNode[getTreeSize(N)];
		buildTree(word, 1, 0, N - 1);

	}

	int getTreeSize(int N) {

		int size = 1;

		// using bitwise to multiply the size by 20
		for (; size <= N; size <<= 1)
			;

		size <<= 1;

		// System.out.println("size is=" + size);

		return size;

	}

	void buildTree(char arr[], int current, int low, int high) {

		if (low == high) {

			nodes[current] = new SegmentTreeNode();
			nodes[current].assignLeaf(arr[low]);

		} else {

			int left = 2 * current;
			int right = left + 1;
			int mid = (low + high) / 2;

			buildTree(arr, left, low, mid);
			buildTree(arr, right, mid + 1, high);

			nodes[current] = new SegmentTreeNode();
			nodes[current].merge(nodes[left], nodes[right]);
		}

	}

	boolean getValue(int start, int end) {

		SegmentTreeNode resultNode = getResultNode(1, 0, N - 1, start, end);
		return resultNode.getValue(resultNode);
	}

	private SegmentTreeNode getResultNode(int current, int left, int right, int low, int high) {

		if (left == low && right == high)
			return nodes[current];

		int mid = (left + right) / 2;

		if (low > mid)
			return getResultNode(2 * current + 1, mid + 1, right, low, high);

		if (high <= mid)
			return getResultNode(2 * current, left, mid, low, high);

		SegmentTreeNode leftResult = getResultNode(2 * current, left, mid, low, mid);
		SegmentTreeNode rightResult = getResultNode(2 * current + 1, mid + 1, right, mid + 1, high);

		SegmentTreeNode result = new SegmentTreeNode();

		result.merge(leftResult, rightResult);

		return result;

	}

	public void updateUtil(int index, char value) {

		update(1, 0, N - 1, index, value);

	}

	public void update(int startIndex, int low, int high, int updateIndex, char value) {

		if (low == high) {

			nodes[startIndex].assignLeaf(value);
			return;
		}

		int left = 2 * startIndex;
		int right = left + 1;
		int mid = (low + high) / 2;

		if (updateIndex <= mid)
			update(left, low, mid, updateIndex, value);
		else
			update(right, mid + 1, high, updateIndex, value);

		nodes[startIndex].merge(nodes[left], nodes[right]);
	}

}

class Brackets {

	public static void main(String[] args) throws IOException {

		int N;
		//String input;
		//Scanner s = new Scanner(System.in);

		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter writer = new PrintWriter(System.out);
	

		for (int i = 1; i <= 10; i++) {

			StringTokenizer st = new StringTokenizer(reader.readLine());
			N = Integer.parseInt(st.nextToken());
			char arr[] = new char[N];

			st = new StringTokenizer(reader.readLine());
			//int counter = 0;

			String ip = st.nextToken();
			arr = ip.toCharArray();
			SegmentTree tree = new SegmentTree(arr, N);

			st = new StringTokenizer(reader.readLine());

			int k = Integer.parseInt(st.nextToken());

			while ((k--) > 0) {

				st = new StringTokenizer(reader.readLine());
				int choice = Integer.parseInt(st.nextToken());
				if (choice != 0) {

					char ch = arr[choice];
					if (ch == '(')
						arr[choice] = ')';
					else
						arr[choice] = '(';

					tree.updateUtil(choice, arr[choice]);
				} else { // to get the tree result

					boolean b = tree.getValue(0, N - 1);

					if (b == true)
						writer.write("YES" + "\n");
					else
						writer.write("NO" + "\n");

					writer.flush();
				}

			}
		}

		
	}

}
